--- CMakeLists.txt.orig	2016-01-22 11:09:57.000000000 +0100
+++ CMakeLists.txt	2016-01-22 17:24:59.215415000 +0100
@@ -10,7 +10,7 @@
     DEFINITION LUA_LIBRARIES)
 ELSE(USE_BUILTIN_LUA)
   find_package(PkgConfig)
-  pkg_check_modules(LUA lua>=5.2)
+  pkg_check_modules(LUA lua-5.2)
   IF(LUA_FOUND)
     INCLUDE_DIRECTORIES(${LUA_INCLUDE_DIRS})
     add_definitions(-DWITH_EXTERNAL_LUA)
@@ -19,11 +19,26 @@
   ENDIF(LUA_FOUND)
 ENDIF(USE_BUILTIN_LUA)
 
-add_subdirectory (MQTT)
-get_directory_property (CMAKE_MQTT_INCLUDES DIRECTORY MQTT
-    DEFINITION MQTT_INCLUDE_DIRS)
-get_directory_property (CMAKE_MQTT_LIBRARIES DIRECTORY MQTT
-    DEFINITION MQTT_LIBRARIES)
+option(USE_BUILTIN_MQTT "Use builtin Mosquitto library" YES)
+IF(USE_BUILTIN_MQTT)
+  message(STATUS "Using builtin Mosquitto library")
+  add_subdirectory (MQTT)
+  get_directory_property (CMAKE_MQTT_INCLUDES DIRECTORY MQTT
+      DEFINITION MQTT_INCLUDE_DIRS)
+  get_directory_property (CMAKE_MQTT_LIBRARIES DIRECTORY MQTT
+      DEFINITION MQTT_LIBRARIES)
+ELSE(USE_BUILTIN_MQTT)
+  find_path(CMAKE_MQTT_INCLUDE NAMES mosquittopp.h)
+  IF(CMAKE_MQTT_INCLUDE)
+     message(STATUS "Found mosquitto mosquittopp.h at: ${CMAKE_MQTT_INCLUDE}")
+     find_library(CMAKE_MQTT_LIBRARIES NAMES libmosquittopp.so)
+     IF(CMAKE_MQTT_LIBRARIES)
+        message(STATUS "Found mosquitto lib at: ${CMAKE_MQTT_LIBRARIES}") 
+     ENDIF(CMAKE_MQTT_LIBRARIES)
+  ELSE(CMAKE_MQTT_INCLUDE)
+     meessage(FATAL_ERROR "Mosquitto includes or library cannot be found, and you ask to NOT use builtin")
+  ENDIF(CMAKE_MQTT_INCLUDE)
+ENDIF(USE_BUILTIN_MQTT)
 
 option(USE_BUILTIN_SQLITE "Use builtin sqlite library" YES)
 IF(USE_BUILTIN_SQLITE)
@@ -132,23 +147,24 @@
   ENDIF(CMAKE_COMPILER_IS_GNUCXX)
 ENDMACRO()
 
-FIND_PROGRAM(GIT_EXECUTABLE git
-  DOC "git command line client")
+#FIND_PROGRAM(GIT_EXECUTABLE git
+#  DOC "git command line client")
 
-MACRO(Gitversion_GET_REVISION dir variable)
-  EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} rev-list HEAD --count
-    OUTPUT_VARIABLE ${variable}
-    OUTPUT_STRIP_TRAILING_WHITESPACE)
-ENDMACRO(Gitversion_GET_REVISION)
-
-Gitversion_GET_REVISION(. ProjectRevision)
-MATH(EXPR ProjectRevision "${ProjectRevision}+2107")
-MESSAGE(STATUS "Compiling Revision #${ProjectRevision}")
+#MACRO(Gitversion_GET_REVISION dir variable)
+#  EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} rev-list HEAD --count
+#    OUTPUT_VARIABLE ${variable}
+#    OUTPUT_STRIP_TRAILING_WHITESPACE)
+#ENDMACRO(Gitversion_GET_REVISION)
+
+#Gitversion_GET_REVISION(. ProjectRevision)
+#MATH(EXPR ProjectRevision "${ProjectRevision}+2107")
+#MESSAGE(STATUS "Compiling Revision #${ProjectRevision}")
+MESSAGE(STATUS "Compiling Revision #XXXDOMOTICZXXX")
 
 # The version number.
 set (domoticz_VERSION_MAJOR 3)
 set (domoticz_VERSION_MINOR 0)
-set (domoticz_VERSION_PATCH ${ProjectRevision})
+set (domoticz_VERSION_PATCH XXXDOMOTICZXXX)
 
 include_directories(${CMAKE_SOURCE_DIR}/main)
 
@@ -536,7 +552,7 @@
 IF(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
   target_link_libraries(domoticz ${Boost_LIBRARIES} ${ZLIB_LIBRARIES} ${CURL_LIBRARIES} pthread ${LUA_LIBRARIES} mqtt ${SQLite_LIBRARIES} ${CMAKE_DL_LIBS})
 else()
-  target_link_libraries(domoticz -lrt ${Boost_LIBRARIES} ${ZLIB_LIBRARIES} ${CURL_LIBRARIES} pthread ${LUA_LIBRARIES} mqtt ${SQLite_LIBRARIES} ${CMAKE_DL_LIBS})
+  target_link_libraries(domoticz -lrt ${Boost_LIBRARIES} ${ZLIB_LIBRARIES} ${CURL_LIBRARIES} -LXXXPREFIXXX/lib pthread ${LUA_LIBRARIES} mqtt ${SQLite_LIBRARIES} ${CMAKE_DL_LIBS})
 ENDIF()
 
 ADD_PRECOMPILED_HEADER(domoticz "main/stdafx.h")
